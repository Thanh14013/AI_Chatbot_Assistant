version: "3.8"

services:
  # PostgreSQL Database (Private - only accessible within Docker network)
  postgres:
    image: pgvector/pgvector:pg16
    container_name: chatbot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chatbot_db}
      POSTGRES_USER: ${POSTGRES_USER:-chatbot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-chatbot_password_change_me}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - chatbot-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-chatbot_user} -d ${POSTGRES_DB:-chatbot_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    # No ports exposed - private to Docker network

  # Redis Cache (Private - only accessible within Docker network)
  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_change_me} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # No ports exposed - private to Docker network

  # Backend Server (Private - only accessible within Docker network)
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: chatbot-server
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Server configuration
      NODE_ENV: production
      PORT: 3000

      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-chatbot_user}:${POSTGRES_PASSWORD:-chatbot_password_change_me}@postgres:5432/${POSTGRES_DB:-chatbot_db}

      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_change_me}
      REDIS_DB: 0

      # CORS configuration
      CORS_ORIGIN: ${CORS_ORIGIN:-true}

      # JWT Secret
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_me}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}

      # OpenAI API (if using)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}

      # Cloudinary (if using)
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME:-}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY:-}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET:-}

      # Database sync (set to false in production)
      DB_SYNC: ${DB_SYNC:-false}
    volumes:
      - ./server/temp:/app/temp
    networks:
      - chatbot-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # No ports exposed - private to Docker network

  # Frontend Client (Public - exposed to LAN)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: chatbot-client
    restart: unless-stopped
    depends_on:
      server:
        condition: service_healthy
    ports:
      - "${CLIENT_PORT:-80}:80" # Exposed to LAN
    networks:
      - chatbot-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:80",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# Docker networks
networks:
  chatbot-network:
    driver: bridge
    name: chatbot-network

# Docker volumes for data persistence
volumes:
  postgres_data:
    name: chatbot_postgres_data
  redis_data:
    name: chatbot_redis_data
