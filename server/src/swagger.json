{
  "openapi": "3.0.0",
  "info": {
    "title": "AI Chatbot Assistant API",
    "version": "1.0.0",
    "description": "API documentation for authentication, conversations, messaging endpoints (HTTP REST API) and WebSocket real-time events"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Local development server (HTTP API)"
    },
    {
      "url": "ws://localhost:3000",
      "description": "Local development server (WebSocket)"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "example": "John Doe" },
                  "email": { "type": "string", "format": "email", "example": "john@example.com" },
                  "password": { "type": "string", "example": "secret123" },
                  "confirmPassword": { "type": "string", "example": "secret123" }
                },
                "required": ["name", "email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": { "type": "string", "example": "User registered successfully" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": { "application/json": { "schema": { "type": "object" } } }
          },
          "409": {
            "description": "Email already registered",
            "content": { "application/json": { "schema": { "type": "object" } } }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login user and retrieve tokens",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email", "example": "john@example.com" },
                  "password": { "type": "string", "example": "secret123" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful (refresh token set as HttpOnly cookie)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": { "type": "string", "example": "Login successful" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": { "type": "object" },
                        "accessToken": { "type": "string", "example": "eyJhbGciOi..." }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Missing credentials" },
          "401": { "description": "Invalid credentials" }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh access token using refresh token (cookie or body)",
        "tags": ["Auth"],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": { "type": "string", "example": "<refresh-token>" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": { "type": "string", "example": "Token refreshed successfully" },
                    "data": {
                      "type": "object",
                      "properties": { "accessToken": { "type": "string" } }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Missing refresh token" },
          "401": { "description": "Invalid or expired refresh token" }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout user and revoke refresh token",
        "tags": ["Auth"],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": { "type": "string", "example": "<refresh-token>" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Logout successful" },
          "404": { "description": "Refresh token not found" }
        }
      }
    },
    "/conversations": {
      "post": {
        "summary": "Create a new conversation",
        "tags": ["Conversations"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateConversation" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Conversation created",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Conversation" } }
            }
          },
          "401": { "description": "Unauthorized" }
        }
      },
      "get": {
        "summary": "List user's conversations",
        "tags": ["Conversations"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "in": "query", "name": "page", "schema": { "type": "integer", "default": 1 } },
          { "in": "query", "name": "limit", "schema": { "type": "integer", "default": 20 } }
        ],
        "responses": {
          "200": {
            "description": "Paginated conversations list",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConversationList" } }
            }
          },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/conversations/{id}": {
      "get": {
        "summary": "Get a conversation by ID",
        "tags": ["Conversations"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Conversation" } }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Not found" }
        }
      },
      "patch": {
        "summary": "Update a conversation",
        "tags": ["Conversations"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UpdateConversation" } }
          }
        },
        "responses": {
          "200": {
            "description": "Updated conversation",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Conversation" } }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Not found" }
        }
      },
      "delete": {
        "summary": "Delete (soft) a conversation",
        "tags": ["Conversations"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Deleted" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/conversations/{id}/messages": {
      "get": {
        "summary": "Get messages for a conversation (paginated)",
        "tags": ["Messages"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          { "in": "query", "name": "page", "schema": { "type": "integer", "default": 1 } },
          { "in": "query", "name": "limit", "schema": { "type": "integer", "default": 30 } }
        ],
        "responses": {
          "200": {
            "description": "Paginated messages",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MessageList" } }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Conversation not found" }
        }
      }
    },
    "/messages/{messageId}": {
      "delete": {
        "summary": "Delete a message",
        "tags": ["Messages"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "messageId",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "Deleted" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Not found" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Conversation": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "user_id": { "type": "string", "format": "uuid" },
          "title": { "type": "string" },
          "model": { "type": "string" },
          "context_window": { "type": "integer" },
          "total_tokens_used": { "type": "integer" },
          "message_count": { "type": "integer" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "CreateConversation": {
        "type": "object",
        "properties": {
          "title": { "type": "string" },
          "model": { "type": "string", "example": "gpt-5-nano" },
          "context_window": { "type": "integer", "default": 10 }
        },
        "required": ["title"]
      },
      "UpdateConversation": {
        "type": "object",
        "properties": {
          "title": { "type": "string" },
          "model": { "type": "string" },
          "context_window": { "type": "integer" }
        }
      },
      "ConversationList": {
        "type": "object",
        "properties": {
          "items": { "type": "array", "items": { "$ref": "#/components/schemas/Conversation" } },
          "pagination": {
            "type": "object",
            "properties": {
              "page": { "type": "integer" },
              "limit": { "type": "integer" },
              "total": { "type": "integer" },
              "totalPages": { "type": "integer" }
            }
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "conversation_id": { "type": "string", "format": "uuid" },
          "role": { "type": "string", "example": "user" },
          "content": { "type": "string" },
          "tokens_used": { "type": "integer" },
          "model": { "type": "string" },
          "createdAt": { "type": "string", "format": "date-time" }
        }
      },
      "MessageList": {
        "type": "object",
        "properties": {
          "messages": { "type": "array", "items": { "$ref": "#/components/schemas/Message" } },
          "pagination": {
            "type": "object",
            "properties": {
              "page": { "type": "integer" },
              "limit": { "type": "integer" },
              "total": { "type": "integer" },
              "totalPages": { "type": "integer" }
            }
          }
        }
      }
    }
  },
  "x-socket-events": {
    "description": "WebSocket/Socket.IO Real-time Events Documentation",
    "authentication": {
      "description": "All WebSocket connections require JWT authentication via token in auth header, query parameter, or handshake auth",
      "token": "Bearer <access-token>",
      "example": "socket.auth({ token: 'your-jwt-token' })"
    },
    "connection": {
      "url": "ws://localhost:3000",
      "description": "WebSocket connection endpoint with Socket.IO",
      "authentication_required": true,
      "events": {
        "connection": {
          "description": "Client connects to WebSocket server",
          "direction": "client->server",
          "authentication": "Required"
        },
        "disconnect": {
          "description": "Client disconnects from WebSocket server",
          "direction": "client->server"
        }
      }
    },
    "client-to-server-events": {
      "join:conversation": {
        "summary": "Join a conversation room for real-time updates",
        "description": "Client joins a conversation room to receive real-time messages and updates",
        "parameters": {
          "conversationId": {
            "type": "string",
            "format": "uuid",
            "description": "Conversation ID to join",
            "required": true
          }
        },
        "responses": {
          "conversation:joined": {
            "description": "Confirmation that client joined the conversation",
            "data": {
              "conversationId": "string"
            }
          }
        }
      },
      "leave:conversation": {
        "summary": "Leave a conversation room",
        "description": "Client leaves a conversation room",
        "parameters": {
          "conversationId": {
            "type": "string",
            "format": "uuid",
            "description": "Conversation ID to leave",
            "required": true
          }
        },
        "responses": {
          "conversation:left": {
            "description": "Confirmation that client left the conversation",
            "data": {
              "conversationId": "string"
            }
          }
        }
      },
      "message:send": {
        "summary": "Send a message and stream AI response",
        "description": "Send a user message and receive streaming AI response in real-time",
        "parameters": {
          "conversationId": {
            "type": "string",
            "format": "uuid",
            "description": "Conversation ID",
            "required": true
          },
          "content": {
            "type": "string",
            "description": "Message content",
            "required": true
          }
        },
        "responses": {
          "message:chunk": {
            "description": "Streaming AI response chunks",
            "data": {
              "conversationId": "string",
              "chunk": "string",
              "content": "string (accumulated)"
            }
          },
          "message:complete": {
            "description": "Complete message data after streaming finishes",
            "data": {
              "userMessage": "Message object",
              "assistantMessage": "Message object",
              "conversation": "Conversation object"
            }
          }
        }
      },
      "conversation:create": {
        "summary": "Broadcast conversation creation",
        "description": "Notify other client instances about new conversation creation",
        "parameters": {
          "conversation": {
            "type": "object",
            "description": "Complete conversation object",
            "required": true
          }
        }
      },
      "conversation:update": {
        "summary": "Broadcast conversation updates",
        "description": "Notify other client instances about conversation updates",
        "parameters": {
          "conversationId": {
            "type": "string",
            "format": "uuid",
            "required": true
          },
          "update": {
            "type": "object",
            "description": "Update data (title, model, etc.)",
            "required": true
          }
        }
      },
      "conversation:delete": {
        "summary": "Broadcast conversation deletion",
        "description": "Notify other client instances about conversation deletion",
        "parameters": {
          "conversationId": {
            "type": "string",
            "format": "uuid",
            "required": true
          }
        }
      },
      "typing:start": {
        "summary": "Start typing indicator",
        "description": "Notify other users that this user is typing",
        "parameters": {
          "conversationId": {
            "type": "string",
            "format": "uuid",
            "required": true
          }
        }
      },
      "typing:stop": {
        "summary": "Stop typing indicator",
        "description": "Notify other users that this user stopped typing",
        "parameters": {
          "conversationId": {
            "type": "string",
            "format": "uuid",
            "required": true
          }
        }
      },
      "ping": {
        "summary": "Connection health check",
        "description": "Send ping to check connection health",
        "responses": {
          "pong": {
            "description": "Server responds with pong"
          }
        }
      }
    },
    "server-to-client-events": {
      "message:chunk": {
        "summary": "AI response streaming chunks",
        "description": "Real-time streaming of AI response chunks",
        "data": {
          "conversationId": "string",
          "chunk": "string",
          "content": "string (accumulated content)"
        }
      },
      "message:new": {
        "summary": "New message notification",
        "description": "Notify about new messages from other users/devices",
        "data": {
          "conversationId": "string",
          "message": "Message object"
        }
      },
      "message:complete": {
        "summary": "Complete message data",
        "description": "Final message data after streaming completes",
        "data": {
          "userMessage": "Message object",
          "assistantMessage": "Message object",
          "conversation": "Conversation object"
        }
      },
      "conversation:joined": {
        "summary": "Conversation join confirmation",
        "description": "Confirm client successfully joined conversation room",
        "data": {
          "conversationId": "string"
        }
      },
      "conversation:left": {
        "summary": "Conversation leave confirmation",
        "description": "Confirm client successfully left conversation room",
        "data": {
          "conversationId": "string"
        }
      },
      "conversation:created": {
        "summary": "Conversation creation notification",
        "description": "Notify about new conversation creation",
        "data": "Conversation object"
      },
      "conversation:updated": {
        "summary": "Conversation update notification",
        "description": "Notify about conversation updates",
        "data": {
          "conversationId": "string",
          "update": "object"
        }
      },
      "conversation:deleted": {
        "summary": "Conversation deletion notification",
        "description": "Notify about conversation deletion",
        "data": {
          "conversationId": "string"
        }
      },
      "conversation:activity": {
        "summary": "Conversation activity update",
        "description": "Update conversation activity for list refresh",
        "data": {
          "conversationId": "string",
          "lastActivity": "string",
          "messageCount": "number",
          "totalTokens": "number"
        }
      },
      "user:typing:start": {
        "summary": "User typing indicator start",
        "description": "Show typing indicator for other users",
        "data": {
          "userId": "string",
          "conversationId": "string"
        }
      },
      "user:typing:stop": {
        "summary": "User typing indicator stop",
        "description": "Hide typing indicator for other users",
        "data": {
          "userId": "string",
          "conversationId": "string"
        }
      },
      "ai:typing:start": {
        "summary": "AI typing indicator start",
        "description": "Show AI is generating response",
        "data": {
          "conversationId": "string"
        }
      },
      "ai:typing:stop": {
        "summary": "AI typing indicator stop",
        "description": "Hide AI typing indicator",
        "data": {
          "conversationId": "string"
        }
      },
      "error": {
        "summary": "Error notification",
        "description": "Server error notifications",
        "data": {
          "message": "string",
          "type": "string (optional)"
        }
      },
      "pong": {
        "summary": "Connection health response",
        "description": "Response to ping for connection health check"
      }
    },
    "rooms": {
      "description": "Socket.IO rooms for organizing connections",
      "user-rooms": {
        "pattern": "user:{userId}",
        "description": "Personal room for each user (for cross-tab synchronization)"
      },
      "conversation-rooms": {
        "pattern": "conversation:{conversationId}",
        "description": "Room for all participants in a conversation"
      }
    },
    "websocket-auth": {
      "description": "WebSocket authentication methods",
      "methods": [
        {
          "method": "auth header",
          "example": "socket.handshake.headers.authorization = 'Bearer <token>'"
        },
        {
          "method": "query parameter",
          "example": "ws://localhost:3000?token=<token>"
        },
        {
          "method": "handshake auth",
          "example": "socket.auth({ token: '<token>' })"
        }
      ]
    }
  }
}
