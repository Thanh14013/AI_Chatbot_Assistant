import { DataTypes, Model, Optional } from "sequelize";
import sequelize from "../db/database.config.js";
import type { IUser } from "../types/user.js";

// define User model
type UserAttributes = Omit<IUser, "createdAt" | "updatedAt"> & {
  createdAt?: Date;
  updatedAt?: Date;
};

// when creating a new User (Create DTO) id, createdAt, updatedAt may be missing
type UserCreationAttributes = Optional<UserAttributes, "id" | "createdAt" | "updatedAt">;

// define User model class
class User extends Model<UserAttributes, UserCreationAttributes> implements UserAttributes {
  public id!: string;
  public name!: string;
  public email!: string;
  public password!: string;

  public readonly createdAt!: Date;
  public readonly updatedAt!: Date;

  // methods for finding users by email
  public static async findByEmail(email: string): Promise<User | null> {
    return User.findOne({ where: { email } });
  }

  // methods for finding users by name
  public static async findByName(name: string): Promise<User | null> {
    return User.findOne({ where: { name } });
  }
}

// initialize User model
User.init(
  {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4, // UUID will be auto-generated by Sequelize
      primaryKey: true,
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
      unique: true,
      allowNull: false,
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false, // password will be hashed in service, not stored as plain text
    },
  },
  {
    sequelize, // connection from db/database.connection.ts
    tableName: "users",
    modelName: "User",
    timestamps: true, // createdAt, updatedAt will be auto-generated by Sequelize
  }
);

export default User;
