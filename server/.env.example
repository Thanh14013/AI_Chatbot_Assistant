# Environment Configuration Template

# Server Configuration
PORT=3000
NODE_ENV=development

# Database Configuration
# Format: postgresql://username:password@host:port/database_name
# Example: postgresql://postgres:mypassword@localhost:5432/ai_chatbot_db
DATABASE_URL=postgresql://<username>:<password>@localhost:5432/<database_name>

# Database SSL (set to true for production databases like Heroku, AWS RDS, etc.)
DB_SSL=false

# Redis Configuration (for caching)
# Development: No password required (localhost only)
# Production: Set REDIS_PASSWORD for security
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# OpenAI Configuration
# Required for chat completions and semantic search (embeddings)
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your-openai-api-key-here

# JWT Configuration (change these in production!)
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
JWT_EXPIRES_IN=1h
REFRESH_TOKEN_SECRET=your-super-secret-refresh-token-key-change-this
REFRESH_TOKEN_EXPIRES_IN=7d

# CORS Configuration (comma-separated list of allowed origins)
CORS_ORIGINS=http://localhost:5173,http://localhost:3000

# Logging
LOG_LEVEL=info

# Feature Flags
# Disable conversation context (use only current message)
DISABLE_CONTEXT=false

# Enable semantic context (use embeddings for intelligent context building)
# Requires OPENAI_API_KEY to be set
# When enabled, combines recent messages with semantically relevant older messages
USE_SEMANTIC_CONTEXT=false
